#include "svIcons.h"

namespace __svl_lib{

//parallel
void DrawArrow1(float arrowbase,
                float arrowheight, 
                float height,
                svVector3 pos)
{
    glBegin(GL_LINES);
    glVertex2f(pos[0], pos[1]);
    glVertex2f(pos[0], pos[1]+height);
    glEnd();

    svVector3 arrowpos[3];
    arrowpos[0][0] = pos[0]-arrowbase/2.;
    arrowpos[0][1] = pos[1]+height;
    arrowpos[1][0] = pos[0]+arrowbase/2.;
    arrowpos[1][1] = pos[1]+height;
    arrowpos[2][0] = pos[0];
    arrowpos[2][1] = pos[1]+height+arrowheight;
    glBegin(GL_TRIANGLES);
    glVertex2f(arrowpos[0][0],arrowpos[0][1]);
    glVertex2f(arrowpos[1][0],arrowpos[1][1]);
    glVertex2f(arrowpos[2][0],arrowpos[2][1]);
    glEnd();
}

//anti-symmetry right 
void DrawArrow2(float arrowbase,
                float arrowheight,
                float height,
                svVector3 pos)
{
    glBegin(GL_LINES);
    glVertex2f(pos[0], pos[1]);
    glVertex2f(pos[0], pos[1]-height);
    glEnd();

    svVector3 arrowpos[3];
    arrowpos[0][0] = pos[0]-arrowbase/2.;
    arrowpos[0][1] = pos[1]-height;
    arrowpos[1][0] = pos[0]+arrowbase/2.;
    arrowpos[1][1] = pos[1]-height;
    arrowpos[2][0] = pos[0];
    arrowpos[2][1] = pos[1]-height-arrowheight;
    glBegin(GL_TRIANGLES);
    glVertex2f(arrowpos[0][0],arrowpos[0][1]);
    glVertex2f(arrowpos[2][0],arrowpos[2][1]);
    glVertex2f(arrowpos[1][0],arrowpos[1][1]);
    glEnd();
}

void DrawArrowButton(float w, float h,
                     svVector3 pos,
                     int type)
{
    glBegin(GL_QUADS);
    glVertex2f(pos[0],pos[1]);
    glVertex2f(pos[0]+w,pos[1]);
    glVertex2f(pos[0]+w,pos[1]+h);
    glVertex2f(pos[0],pos[1]+h);
    glEnd();

    float onew = w;
    glColor4f(0,0,0,0.5);
    float ratio =2./3.;
    float rh = 1./4.;
    float arrowbase = w/5.;
    float arrowheight = 3.73;
    float arroww = (onew/2.) * ratio;
    float arrowh = h * rh; 
    float height = (h - arrowh*2.) -  arrowbase/2. * arrowheight;

    switch(type){
       case '0':
               {
                  svVector3 p;
                  p[0] = pos[0] + w - (w/2.)*ratio;
                  p[1] = pos[1] + arrowh;
                  arrowheight = arrowbase/2. * arrowheight;
                  DrawArrow1(arrowbase, arrowheight, height, p);
                  p[0] = pos[0] + (w/2.)*ratio;
                  DrawArrow1(arrowbase, arrowheight, height, p);
               }
               break;
       case '1':
               {
                  rh = 1./6.;
                  arrowh = h/2.;
                  height = (h - rh*h) - arrowbase/2. * arrowheight;
                  svVector3 p;
                  p[0] = pos[0] + w - (w/2.)*ratio;
                  p[1] = pos[1] + arrowh;
                  arrowheight = arrowbase/2. * arrowheight;
                  DrawArrow1(arrowbase, arrowheight, height, p);
                  p[0] = pos[0] + (w/2.)*ratio;
                  DrawArrow2(arrowbase, arrowheight, height, p);
               }
               break;
    };

//    glBegin(GL_LINES);
//    glVertex2f(pos[0]+arroww, pos[1]+arrowh);
//    glVertex2f(pos[0]+arroww, pos[1]+arrowh+height);
//    glEnd();        

//    arroww = onew - (onew/2.) * ratio;
//    glBegin(GL_LINES);
//    glVertex2f(pos[0]+arroww, pos[1]+arrowh);
//    glVertex2f(pos[0]+arroww, pos[1]+arrowh+height);
//    glEnd(); 

//    arroww = (onew/2.) * ratio;
//    svVector3 arrowpos[3];
//    arrowpos[0][0] = pos[0]+arroww-arrowbase/2.;
//    arrowpos[0][1] = pos[1]+arrowh+height;
//    arrowpos[1][0] = pos[0]+arroww+arrowbase/2.;
//    arrowpos[1][1] = pos[1]+arrowh+height;
//    arrowpos[2][0] = pos[0]+arroww;
//    arrowpos[2][1] = pos[1]+arrowh+height+arrowheight*arrowbase/2.;
//    glBegin(GL_TRIANGLES);
//    glVertex2f(arrowpos[0][0],arrowpos[0][1]);
//    glVertex2f(arrowpos[1][0],arrowpos[1][1]);
//    glVertex2f(arrowpos[2][0],arrowpos[2][1]);
//    glEnd();

//    arroww = onew - (onew/2.) * ratio;
//    arrowpos[0][0] = pos[0]+arroww-arrowbase/2.;
//    arrowpos[0][1] = pos[1]+arrowh+height;
//    arrowpos[1][0] = pos[0]+arroww+arrowbase/2.;
//    arrowpos[1][1] = pos[1]+arrowh+height;
//    arrowpos[2][0] = pos[0]+arroww;
//    arrowpos[2][1] = pos[1]+arrowh+height+arrowheight*arrowbase/2.;
//    glBegin(GL_TRIANGLES);
//    glVertex2f(arrowpos[0][0],arrowpos[0][1]);
//    glVertex2f(arrowpos[1][0],arrowpos[1][1]);
//    glVertex2f(arrowpos[2][0],arrowpos[2][1]);
//    glEnd();
}

void DrawDownButtons(float w, float h,
                     svVector3 pos)
{
    float barh = h/20.;
    glColor4f(0,0,0,0.5);
    glBegin(GL_QUADS);
    glVertex2f(pos[0]-barh,pos[1]+h);
    glVertex2f(pos[0]+w,pos[1]+h);
    glVertex2f(pos[0]+w,pos[1]+h+barh);
    glVertex2f(pos[0]-barh,pos[1]+h+barh);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(pos[0]-barh,pos[1]);
    glVertex2f(pos[0],pos[1]);
    glVertex2f(pos[0],pos[1]+h);
    glVertex2f(pos[0]-barh,pos[1]+h);
    glEnd();

    float highth = h/5.;
    glColor4f(204./255., 76./255., 2./255., 0.5);

    glBegin(GL_QUADS);
    glVertex2f(pos[0]-barh-highth,pos[1]);
    glVertex2f(pos[0]-barh,pos[1]);
    glVertex2f(pos[0]-barh,pos[1]+h+barh);
    glVertex2f(pos[0]-barh-highth,pos[1]+h+barh);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(pos[0]-barh-highth,pos[1]+h+barh);
    glVertex2f(pos[0]+w,pos[1]+h+barh);
    glVertex2f(pos[0]+w,pos[1]+h+barh+highth);
    glVertex2f(pos[0]-barh-highth,pos[1]+h+barh+highth);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(pos[0]+w,pos[1]);
    glVertex2f(pos[0]+w+highth,pos[1]);
    glVertex2f(pos[0]+w+highth,pos[1]+h+barh+highth);
    glVertex2f(pos[0]+w,pos[1]+h+barh+highth);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(pos[0]-barh-highth,pos[1]-highth);
    glVertex2f(pos[0]+w+highth,pos[1]-highth);
    glVertex2f(pos[0]+w+highth,pos[1]);
    glVertex2f(pos[0]-barh-highth,pos[1]);
    glEnd();
}

void DrawUpButtons(float w, float h,
                     svVector3 pos)
{
    float barh = h/20.;
    glColor4f(0,0,0,0.5);
    glBegin(GL_QUADS);
    glVertex2f(pos[0],pos[1]-barh);
    glVertex2f(pos[0]+w,pos[1]-barh);
    glVertex2f(pos[0]+w,pos[1]);
    glVertex2f(pos[0],pos[1]);
    glEnd(); 
    glBegin(GL_QUADS);
    glVertex2f(pos[0]+w,pos[1]-barh);
    glVertex2f(pos[0]+w+barh,pos[1]-barh);
    glVertex2f(pos[0]+w+barh,pos[1]+h);
    glVertex2f(pos[0]+w,pos[1]+h);
    glEnd();

}

void DrawArrowDownButton(int type,
                     float w, float h,
                     svVector3 pos,
                     svVector4 color)
{
    float barh = h/20.;
    float highth = h/5.;

    DrawDownButtons(w, h, pos);

    int value = type;
    vector<int> t;
    for(int i=0;i<3;i++)
    {
        t.push_back(value%2);
        value = value/2;
    }


    float tmpw, tmph;
    svVector3 tmppos;
    tmpw = w/3.;
    tmph = h;
    tmppos[0] = pos[0];
    tmppos[1] = pos[1];
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);
    tmppos[0] = pos[0]+w/3.;
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);
    tmppos[0] = pos[0]+w/3.*2.;
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);
}

void DrawArrowUpButton(int type,
                     float w, float h,
                     svVector3 pos,
                     svVector4 color)
{
    float barh = h/20.;

    DrawUpButtons(w, h, pos);

    float tmpw, tmph;
    svVector3 tmppos;
    tmpw = w/3.;
    tmph = h;
    tmppos[0] = pos[0];
    tmppos[1] = pos[1];
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);
    tmppos[0] = pos[0]+w/3.;
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);
    tmppos[0] = pos[0]+w/3.*2.;
    glColor4f(color[0],color[1],color[2],color[3]);
    DrawArrowButton(tmpw, tmph, tmppos,type);

}


}
